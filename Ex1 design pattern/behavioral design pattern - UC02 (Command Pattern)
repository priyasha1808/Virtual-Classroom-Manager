// Command.java
public interface Command {
    void execute();
    void undo();
}

// AddStudentCommand.java
public class AddStudentCommand implements Command {
    private Classroom classroom;
    private Student student;

    public AddStudentCommand(Classroom classroom, Student student) {
        this.classroom = classroom;
        this.student = student;
    }

    @Override
    public void execute() {
        classroom.addStudent(student);
        System.out.println("Student " + student.getId() + " has been added to " + classroom.getName());
    }

    @Override
    public void undo() {
        classroom.removeStudent(student);
        System.out.println("Student " + student.getId() + " has been removed from " + classroom.getName());
    }
}

// Classroom.java (updated)
public class Classroom {
    // existing attributes and methods

    public void removeStudent(Student student) {
        students.remove(student);
    }

    // Other methods remain unchanged
}

// Invoker.java
import java.util.Stack;

public class Invoker {
    private Stack<Command> commandStack = new Stack<>();

    public void executeCommand(Command command) {
        command.execute();
        commandStack.push(command);
    }

    public void undoCommand() {
        if (!commandStack.isEmpty()) {
            Command command = commandStack.pop();
            command.undo();
        }
    }
}
